)
# Normalisation de la nouvelle ligne
nouvelle_norm <- predict(preproc, nouvelle_ligne)
# Prédiction
prediction <- predict(arbre_opt, newdata = nouvelle_norm, type = "class")
print(prediction)
# ───── LIBRAIRIES ─────
library(rpart)
library(caret)
library(rpart.plot)
library(ggplot2)
# ───── CHARGEMENT DES DONNÉES ─────
load("~/Documents/48h/R project/AnalyseData/data/clean_data.RData")
df <- DN
# ───── NETTOYAGE DES FACTEURS ─────
# Remplacer les espaces par des underscores dans les niveaux de quartier
df$quartier <- factor(gsub(" ", "_", df$quartier))
# ───── PRÉPARATION DES DONNÉES ─────
df_model <- subset(df, select = -c(X, date, catastrophe))
# ───── SÉPARATION TRAIN / TEST ─────
set.seed(123)
index <- createDataPartition(df_model$catastrophe_simple, p = 0.8, list = FALSE)
train_data <- df_model[index, ]
test_data  <- df_model[-index, ]
# ───── RECHERCHE DE GRILLE SUR cp AVEC CARET ─────
train_control <- trainControl(
method = "cv",
number = 5
)
tune_grid <- expand.grid(cp = seq(0.001, 0.05, by = 0.002))
set.seed(123)
model_caret <- train(
catastrophe_simple ~ .,       # formule
data      = train_data,      # données originales (sans normalisation)
method    = "rpart",
trControl = train_control,
tuneGrid  = tune_grid,
metric    = "Accuracy"
)
print(model_caret)
plot(model_caret)
best_cp   <- model_caret$bestTune$cp
# Modèle optimisé et pruned
final_model <- rpart(
catastrophe_simple ~ .,
data    = train_data,
method  = "class",
control = rpart.control(cp = best_cp)
)
arbre_opt <- prune(final_model, cp = best_cp)
# ───── VISUALISATION DE L’ARBRE ─────
rpart.plot(arbre_opt, type = 2, extra = 104, fallen.leaves = TRUE)
# ───── ÉVALUATION SUR LE TEST ─────
pred_test <- predict(arbre_opt, newdata = test_data, type = "class")
confusionMatrix(pred_test, test_data$catastrophe_simple)
# Moyenne des accuracies cross-validées
mean_accuracy <- mean(model_caret$results$Accuracy)
print(mean_accuracy)
# ______________ UNE LIGNE TEST ______________
# Créer la nouvelle ligne
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite = 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Nettoyage du facteur quartier (underscore)
nouvelle_ligne$quartier <- factor(
gsub(" ", "_", nouvelle_ligne$quartier),
levels = levels(df_model$quartier)
)
# Prédiction
prediction <- predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
print(prediction)
library(stringr)
# Charger les données depuis un fichier CSV
donneesBrute <- read.csv("data/catastrophes_naturelles.csv")
# Afficher les premières lignes
head(donneesBrute)
# Résumé statistique
summary(donneesBrute)
# Structure du jeu de données
str(donneesBrute)
# On voit que des donnes ne sont pas bonnes
# Charger les données depuis un fichier CSV
donneesBrute <- read.csv("data/catastrophes_naturelles.csv")
DN <- donneesBrute
#DN for donneesNettoyeesa
# Identifier les indices des lignes qui NE SONT PAS "buguées"
# en utilisant la même condition et en la niant (!)
lignes_buguees_index <- which(!grepl("[0-9]{2,}", donneesBrute[, 10]))
# Afficher les indices des lignes non "buguées"
print("Indices des lignes non 'buguées' :")
print(lignes_buguees_index)
# Tu peux ensuite utiliser ces indices pour créer un nouveau data frame
donneeBuguees <- donneesBrute[lignes_buguees_index, ]
for (i in lignes_buguees_index) {
valeur <- donneesBrute[i, "X"]
ligne <- str_split(valeur, ",(?![^\\[]*\\])", simplify = TRUE)
DN[i, ] <- ligne[1:12]
}
cols_to_convert <- setdiff(names(DN), c("date", "quartier","catastrophe"))
DN[cols_to_convert] <- lapply(DN[cols_to_convert], function(x) {
if (is.factor(x) || is.character(x)) {
as.numeric(as.character(x))
} else {
x
}
})
#normalisation
DN[cols_to_convert] <- lapply(DN[cols_to_convert], function(x) {
if (is.numeric(x)) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
} else {
x
}
})
# ───── PRÉPARATION DES DONNÉES ─────
DN$catastrophe_simple <- factor(
ifelse(DN$catastrophe == "['innondation']", "innondation",
ifelse(DN$catastrophe == "['innondation', 'seisme']", "innondation_seisme",
ifelse(DN$catastrophe == "['seisme']", "seisme", "aucun")))
)
head(DN)
write.csv(DN,file='data/clean_data.csv', row.names=TRUE)
save(DN, file = "data/clean_data.RData")
View(DN)
DN$catastrophe <- gsub('^"|"$', '', DN$catastrophe)
# ───── PRÉPARATION DES DONNÉES ─────
DN$catastrophe_simple <- factor(
ifelse(DN$catastrophe == "['innondation']", "innondation",
ifelse(DN$catastrophe == "['innondation', 'seisme']", "innondation_seisme",
ifelse(DN$catastrophe == "['seisme']", "seisme", "aucun")))
)
View(DN)
library(stringr)
# Charger les données depuis un fichier CSV
donneesBrute <- read.csv("data/catastrophes_naturelles.csv")
# Afficher les premières lignes
head(donneesBrute)
# Résumé statistique
summary(donneesBrute)
# Structure du jeu de données
str(donneesBrute)
# On voit que des donnes ne sont pas bonnes
# Charger les données depuis un fichier CSV
donneesBrute <- read.csv("data/catastrophes_naturelles.csv")
DN <- donneesBrute
#DN for donneesNettoyeesa
# Identifier les indices des lignes qui NE SONT PAS "buguées"
# en utilisant la même condition et en la niant (!)
lignes_buguees_index <- which(!grepl("[0-9]{2,}", donneesBrute[, 10]))
# Afficher les indices des lignes non "buguées"
print("Indices des lignes non 'buguées' :")
print(lignes_buguees_index)
# Tu peux ensuite utiliser ces indices pour créer un nouveau data frame
donneeBuguees <- donneesBrute[lignes_buguees_index, ]
for (i in lignes_buguees_index) {
valeur <- donneesBrute[i, "X"]
ligne <- str_split(valeur, ",(?![^\\[]*\\])", simplify = TRUE)
DN[i, ] <- ligne[1:12]
}
cols_to_convert <- setdiff(names(DN), c("date", "quartier","catastrophe"))
DN[cols_to_convert] <- lapply(DN[cols_to_convert], function(x) {
if (is.factor(x) || is.character(x)) {
as.numeric(as.character(x))
} else {
x
}
})
#normalisation
DN[cols_to_convert] <- lapply(DN[cols_to_convert], function(x) {
if (is.numeric(x)) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
} else {
x
}
})
DN$catastrophe <- gsub('^"|"$', '', DN$catastrophe)
# ───── PRÉPARATION DES DONNÉES ─────
DN$catastrophe_simple <- factor(
ifelse(DN$catastrophe == "['innondation']", "innondation",
ifelse(DN$catastrophe == "['innondation', 'seisme']", "innondation_seisme",
ifelse(DN$catastrophe == "['seisme']", "seisme", "aucun")))
)
head(DN)
write.csv(DN,file='data/clean_data.csv', row.names=TRUE)
save(DN, file = "data/clean_data.RData")
# ───── LIBRAIRIES ─────
library(rpart)
library(caret)
library(rpart.plot)
library(ggplot2)
# ───── CHARGEMENT DES DONNÉES ─────
load("~/Documents/48h/R project/AnalyseData/data/clean_data.RData")
df <- DN
# ───── NETTOYAGE DES FACTEURS ─────
# Remplacer les espaces par des underscores dans les niveaux de quartier
df$quartier <- factor(gsub(" ", "_", df$quartier))
# ───── PRÉPARATION DES DONNÉES ─────
df_model <- subset(df, select = -c(X, date, catastrophe))
# ───── SÉPARATION TRAIN / TEST ─────
set.seed(123)
index <- createDataPartition(df_model$catastrophe_simple, p = 0.8, list = FALSE)
train_data <- df_model[index, ]
test_data  <- df_model[-index, ]
# ───── RECHERCHE DE GRILLE SUR cp AVEC CARET ─────
train_control <- trainControl(
method = "cv",
number = 5
)
tune_grid <- expand.grid(cp = seq(0.001, 0.05, by = 0.002))
set.seed(123)
model_caret <- train(
catastrophe_simple ~ .,       # formule
data      = train_data,      # données originales (sans normalisation)
method    = "rpart",
trControl = train_control,
tuneGrid  = tune_grid,
metric    = "Accuracy"
)
print(model_caret)
plot(model_caret)
best_cp   <- model_caret$bestTune$cp
# Modèle optimisé et pruned
final_model <- rpart(
catastrophe_simple ~ .,
data    = train_data,
method  = "class",
control = rpart.control(cp = best_cp)
)
arbre_opt <- prune(final_model, cp = best_cp)
# ───── VISUALISATION DE L’ARBRE ─────
rpart.plot(arbre_opt, type = 2, extra = 104, fallen.leaves = TRUE)
# ───── ÉVALUATION SUR LE TEST ─────
pred_test <- predict(arbre_opt, newdata = test_data, type = "class")
confusionMatrix(pred_test, test_data$catastrophe_simple)
# Moyenne des accuracies cross-validées
mean_accuracy <- mean(model_caret$results$Accuracy)
print(mean_accuracy)
# ______________ UNE LIGNE TEST ______________
# Créer la nouvelle ligne
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite = 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Nettoyage du facteur quartier (underscore)
nouvelle_ligne$quartier <- factor(
gsub(" ", "_", nouvelle_ligne$quartier),
levels = levels(df_model$quartier)
)
# Prédiction
prediction <- predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
print(prediction)
# ───── LIBRAIRIES ─────
library(rpart)
library(caret)
library(rpart.plot)
library(ggplot2)
# ───── CHARGEMENT DES DONNÉES ─────
load("~/Documents/48h/R project/AnalyseData/data/clean_data.RData")
df <- DN
# ───── PRÉPARATION DES DONNÉES ─────
df$quartier <- as.factor(df$quartier)
df_model <- subset(df, select = -c(X, date, catastrophe))
# ───── RECHERCHE DE GRILLE SUR cp ─────
train_control <- trainControl(
method = "cv",
number = 5
)
tune_grid <- expand.grid(cp = seq(0.001, 0.05, by = 0.002))
set.seed(123)
model_caret <- train(
catastrophe_simple ~ .,
data      = df_model,
method    = "rpart",
trControl = train_control,
tuneGrid  = tune_grid,
metric    = "Accuracy"
)
print(model_caret)
plot(model_caret)
a
best_cp   <- model_caret$bestTune$cp
arbre_opt <- prune(model_caret$finalModel, cp = best_cp)
# Visualisation de l’arbre optimisé (statique)
rpart.plot(arbre_opt, type = 2, extra = 104, fallen.leaves = TRUE)
# ───── SÉPARATION TRAIN / TEST ─────
set.seed(123)
# ───── LIBRAIRIES ─────
library(rpart)
library(caret)
library(rpart.plot)
library(ggplot2)
# ───── CHARGEMENT DES DONNÉES ─────
load("~/Documents/48h/R project/AnalyseData/data/clean_data.RData")
df <- DN
# ───── PRÉPARATION DES DONNÉES ─────
# Remplacer les espaces par des underscores dans les niveaux de quartier AVANT modélisation
df$quartier <- factor(gsub(" ", "_", df$quartier))
df_model <- subset(df, select = -c(X, date, catastrophe))
# ───── RECHERCHE DE GRILLE SUR cp ─────
train_control <- trainControl(
method = "cv",
number = 5
)
tune_grid <- expand.grid(cp = seq(0.001, 0.05, by = 0.002))
set.seed(123)
model_caret <- train(
catastrophe_simple ~ .,
data      = df_model,
method    = "rpart",
trControl = train_control,
tuneGrid  = tune_grid,
metric    = "Accuracy"
)
print(model_caret)
plot(model_caret)
best_cp   <- model_caret$bestTune$cp
arbre_opt <- prune(model_caret$finalModel, cp = best_cp)
# Visualisation de l’arbre optimisé (statique)
rpart.plot(arbre_opt, type = 2, extra = 104, fallen.leaves = TRUE)
# ───── SÉPARATION TRAIN / TEST ─────
set.seed(123)
index <- createDataPartition(df_model$catastrophe_simple, p = 0.8, list = FALSE)
train_data <- df_model[index, ]
test_data  <- df_model[-index, ]
# ───── MODÈLE FINAL SUR ENTRAÎNEMENT ─────
final_model <- rpart(
catastrophe_simple ~ .,
data = train_data,
method = "class",
control = rpart.control(cp = best_cp)
)
# ───── PRÉDICTION ET ÉVALUATION ─────
pred_test <- predict(final_model, newdata = test_data, type = "class")
confusionMatrix(pred_test, test_data$catastrophe_simple)
# ───── MOYENNE DES ACCURACY ─────
mean_accuracy <- mean(model_caret$results$Accuracy)
print(mean_accuracy)
# Créer une nouvelle ligne avec les mêmes niveaux de facteur
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite= 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Assurer les niveaux cohérents dans quartier
nouvelle_ligne$quartier <- factor(gsub(" ", "_", nouvelle_ligne$quartier), levels = levels(df_model$quartier))
predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
# ______________ UNE LIGNE TEST ______________
# Créer la nouvelle ligne
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite = 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Nettoyage du facteur quartier (underscore)
nouvelle_ligne$quartier <- factor(
gsub(" ", "_", nouvelle_ligne$quartier),
levels = levels(df_model$quartier)
)
# Prédiction
prediction <- predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
print(prediction)
# Créer une nouvelle ligne avec les mêmes niveaux de facteur
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite= 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Appliquer proprement à tous les niveaux
df_model$quartier <- factor(gsub(" ", "_", df_model$quartier))
levels(df_model$quartier)  # vérifier : "Zone_1", "Zone_2", etc.
# Même chose pour la nouvelle ligne
nouvelle_ligne$quartier <- factor(gsub(" ", "_", nouvelle_ligne$quartier), levels = levels(df_model$quartier))
predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
print(prediction)
# ───── LIBRAIRIES ─────
library(rpart)
library(caret)
library(rpart.plot)
library(ggplot2)
# ───── CHARGEMENT DES DONNÉES ─────
load("~/Documents/48h/R project/AnalyseData/data/clean_data.RData")
df <- DN
# ───── PRÉPARATION DES DONNÉES ─────
df$quartier <- as.factor(df$quartier)
df_model <- subset(df, select = -c(X, date, catastrophe))
# ───── RECHERCHE DE GRILLE SUR cp ─────
train_control <- trainControl(
method = "cv",
number = 5
)
tune_grid <- expand.grid(cp = seq(0.001, 0.05, by = 0.002))
set.seed(123)
model_caret <- train(
catastrophe_simple ~ .,
data      = df_model,
method    = "rpart",
trControl = train_control,
tuneGrid  = tune_grid,
metric    = "Accuracy"
)
print(model_caret)
plot(model_caret)
a
best_cp   <- model_caret$bestTune$cp
arbre_opt <- prune(model_caret$finalModel, cp = best_cp)
# Visualisation de l’arbre optimisé (statique)
rpart.plot(arbre_opt, type = 2, extra = 104, fallen.leaves = TRUE)
# ───── SÉPARATION TRAIN / TEST ─────
set.seed(123)
index <- createDataPartition(df_model$catastrophe_simple, p = 0.8, list = FALSE)
train_data <- df_model[index, ]
test_data  <- df_model[-index, ]
# ───── MODÈLE FINAL SUR ENTRAÎNEMENT ─────
final_model <- rpart(
catastrophe_simple ~ .,
data = train_data,
method = "class",
control = rpart.control(cp = best_cp)
)
# ───── PRÉDICTION ET ÉVALUATION ─────
pred_test <- predict(final_model, newdata = test_data, type = "class")
confusionMatrix(pred_test, test_data$catastrophe_simple)
# ───── MOYENNE DES ACCURACY ─────
mean_accuracy <- mean(model_caret$results$Accuracy)
print(mean_accuracy)
# Créer une nouvelle ligne avec les mêmes niveaux de facteur
nouvelle_ligne <- data.frame(
quartier = "Zone 2",
surface = 85,
temperature = 13,
nb_pieces = 3,
humidite = 40,
annee_construction = 1995,
valeur_fonciere = 250000,
risque_inondation = 0.3,
risque_seisme = 0.1,
force_moyenne_du_vecteur_de_vent = 6,
force_du_vecteur_de_vent_max = 8,
pluie_intensite_max = 0,
sismicite= 0.5,
concentration_gaz = 0.2,
pluie_totale = 0.1
)
# Appliquer proprement à tous les niveaux
df_model$quartier <- factor(gsub(" ", "_", df_model$quartier))
# Même chose pour la nouvelle ligne
nouvelle_ligne$quartier <- factor(gsub(" ", "_", nouvelle_ligne$quartier), levels = levels(df_model$quartier))
predict(arbre_opt, newdata = nouvelle_ligne, type = "class")
print(prediction)
